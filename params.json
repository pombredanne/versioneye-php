{"name":"Versioneye-php","tagline":"a PHP CLI tool and library for interacting with the VersionEye API","body":"#a PHP CLI/Library for the VersionEye API\r\n\r\nsee https://www.versioneye.com/api/ for API documentation\r\n\r\n[![Build Status](https://travis-ci.org/digitalkaoz/versioneye-php.svg?branch=master)](https://travis-ci.org/digitalkaoz/versioneye-php)\r\n\r\n[![Dependency Status](https://www.versioneye.com/user/projects/5412a7388d7ae1d531009793/badge.svg?style=flat)](https://www.versioneye.com/user/projects/5411b8a68d7ae10d4c009233)\r\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/digitalkaoz/versioneye-php/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/digitalkaoz/versioneye-php/?branch=master)\r\n[![Code Coverage](https://scrutinizer-ci.com/g/digitalkaoz/versioneye-php/badges/coverage.png?b=master)](https://scrutinizer-ci.com/g/digitalkaoz/versioneye-php/?branch=master)\r\n[![SensioLabsInsight](https://insight.sensiolabs.com/projects/f7633a7e-4577-4a86-b6d9-ccaa75cb7fa0/mini.png)](https://insight.sensiolabs.com/projects/f7633a7e-4577-4a86-b6d9-ccaa75cb7fa0)\r\n\r\n[![Latest Stable Version](https://poser.pugx.org/digitalkaoz/versioneye-php/version.svg)](https://packagist.org/packages/digitalkaoz/versioneye-php)\r\n[![Latest Unstable Version](https://poser.pugx.org/digitalkaoz/versioneye-php/v/unstable.svg)](//packagist.org/packages/digitalkaoz/versioneye-php)\r\n[![Total Downloads](https://poser.pugx.org/digitalkaoz/versioneye-php/downloads.svg)](https://packagist.org/packages/digitalkaoz/versioneye-php)\r\n\r\n##Installation\r\n\r\nfirst you have to decide which `http adapter` to use. The library supports `guzzlehttp/guzzle` and `kriswallsmith/buzz`. Where guzzle is default.\r\n\r\n\r\n```\r\n$ composer require \"guzzlehttp/guzzle\" ~4 //or\r\n$ composer require \"kriswallsmith/buzz\" ~0.10\r\n\r\n$ composer require \"digitalkaoz/versioneye-php\" *\r\n```\r\n\r\n##Usage\r\n\r\nall API endpoints are implemented, see https://www.versioneye.com/api/v2/swagger_doc.json for their detailed docs.\r\n\r\n\r\n### programmatic:\r\n\r\n```php\r\n<?php\r\n\r\nuse Rs\\VersionEye\\Client;\r\n\r\n$api = (new Client())->api('services');     // Rs\\VersionEye\\Api\\Services\r\n$api->ping(); //array\r\n\r\n//other implemented APIs\r\n$api = (new Client())->api('github');       // Rs\\VersionEye\\Api\\Github\r\n$api = (new Client())->api('me');           // Rs\\VersionEye\\Api\\Me\r\n$api = (new Client())->api('projects');     // Rs\\VersionEye\\Api\\Projects\r\n$api = (new Client())->api('products');     // Rs\\VersionEye\\Api\\Products\r\n$api = (new Client())->api('sessions');     // Rs\\VersionEye\\Api\\Sessions\r\n$api = (new Client())->api('users');        // Rs\\VersionEye\\Api\\Users\r\n\r\n```\r\n\r\n### cli:\r\n\r\n```\r\n$ bin/versioneye services:ping\r\n$ bin/versioneye products:search symfony\r\n```\r\n\r\n##Configuration\r\n\r\nto store your generated API Token globally you can create a global config file in your home directory:\r\n\r\n`~/.veye.rc` we share the same config file with the ruby cli https://github.com/versioneye/veye\r\n\r\nthe file would look like:\r\n\r\n```rc\r\n:api_key: YOUR_API_TOKEN\r\n```\r\n\r\nnow you dont have to pass your token on each call!\r\n\r\n\r\n##CLI Tool\r\n\r\nto build a standalone phar, simply execute the following commands.\r\n\r\n```\r\n$ vendor/bin/box build\r\n$ php versioneye-php.phar\r\n```\r\n\r\n## Commands:\r\n\r\nThe Commands are autogenerated by introspecting the API Implementations. Each Public Method is a Command, each Method Parameter will be translated into a InputArgument or InputOption.\r\n\r\n\r\n    github\r\n      github:delete            remove imported project\r\n      github:hook              GitHub Hook\r\n      github:import            imports project file from github\r\n      github:repos             lists your's github repos\r\n      github:search            search github repositories on github\r\n      github:show              shows the detailed information for the repository\r\n      github:sync              re-load github data\r\n    me\r\n      me:comments              shows comments of authorized user\r\n      me:favorites             shows favorite packages for authorized user\r\n      me:notifications         shows unread notifications of authorized user\r\n      me:profile               shows profile of authorized user\r\n    products\r\n      products:follow          follow your favorite software package\r\n      products:follow-status   check your following status\r\n      products:references      references\r\n      products:search          search packages\r\n      products:show            detailed information for specific package\r\n      products:unfollow        unfollow given software package\r\n    projects\r\n      projects:all             shows user`s projects\r\n      projects:create          upload project file\r\n      projects:delete          delete given project\r\n      projects:licenses        get grouped view of licences for dependencies\r\n      projects:show            shows the project's information\r\n      projects:update          update project with new file\r\n    services\r\n      services:ping            Answers to request with basic pong.\r\n    sessions\r\n      sessions:close           delete current session aka log out.\r\n      sessions:open            creates new sessions\r\n      sessions:show            returns session info for authorized users\r\n    users\r\n      users:comments           shows user's comments\r\n      users:favorites          shows user's favorite packages\r\n      users:show               shows profile of given user_id\r\n\r\n\r\n##TODO\r\n\r\n* complete output presentations of each api endpoint\r\n* paging results\r\n\r\n##Tests\r\n\r\n```\r\n$ vendor/bin/phpspec run\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}